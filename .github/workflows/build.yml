name: Build and Test Android App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering from GitHub Actions UI

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17 (required for modern Android projects)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 3: Cache Gradle dependencies to speed up builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Step 5: Build debug APK
      - name: Build Debug APK
        run: ./gradlew assembleDebug

      # Step 6: Run unit tests
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

      # Step 7: Build release APK (unsigned)
      - name: Build Release APK
        run: ./gradlew assembleRelease

      # Step 8: Decode Keystore from base64
      - name: Decode Keystore
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: echo $KEYSTORE_BASE64 | base64 -d > signingKey.jks

      # Step 9: Sign the release APK
      - name: Sign Release APK
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
        env:
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
        run: |
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore signingKey.jks \
            -storepass $SIGNING_STORE_PASSWORD \
            -keypass $SIGNING_KEY_PASSWORD \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            $SIGNING_KEY_ALIAS
          mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release-signed.apk

      # Step 10: Upload debug APK as artifact
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Step 11: Upload release APK as artifact
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: app/build/outputs/apk/release/*.apk

      # Step 12: Run lint checks (optional, for code quality)
      - name: Run Lint
        run: ./gradlew lintDebug
